# -*- coding: utf-8 -*-
"""GovExam_practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E07qrGdxkd9rhLD16wDMy6-SlecM4FIu

#1: –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Python

##1: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã
"""

import heapq

class Graph:
    def __init__(self):
        self.nodes = set() #–º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞
        self.edges = {} #—Å–ª–æ–≤–∞—Ä—å —Å–º–µ–∂–Ω–æ—Å—Ç–∏ (–∫–∞–∫–∏–µ —É–∑–ª—ã —Å –∫–∞–∫–∏–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã)
        self.distances = {} #–≤–µ—Å–∞ —Ä–µ–±–µ—Ä

    def add_node(self, value): #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∑–ª–∞
        self.nodes.add(value)
        self.edges[value] = []

    def add_edge(self, from_node, to_node, distance): #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±—Ä–∞
        self.edges[from_node].append(to_node)
        self.edges[to_node].append(from_node)  #–î–ª—è –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
        self.distances[(from_node, to_node)] = distance
        self.distances[(to_node, from_node)] = distance  #–î–ª—è –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞

def dijkstra(graph, initial):
    visited = {initial: 0} #—Å–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∞—Ç—á–∞–π—à–∏–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏ - –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, 0
    path = {} #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π
    nodes = set(graph.nodes) #–º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤

    while nodes:
        min_node = None
        for node in nodes: #–Ω–∞—Ö–æ–¥–∏–º —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –∏–∑ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö
            if node in visited:
                if min_node is None:
                    min_node = node
                elif visited[node] < visited[min_node]:
                    min_node = node

        if min_node is None:
            break  #–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É

        nodes.remove(min_node)#—É–¥–∞–ª—è–µ–º —É–∑–µ–ª –∏–∑ —á–∏—Å–ª–∞ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö
        current_weight = visited[min_node]

        for edge in graph.edges[min_node]: #–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å–µ–¥–∞ —ç—Ç–æ–≥–æ —É–∑–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            weight = current_weight + graph.distances[(min_node, edge)]
            if edge not in visited or weight < visited[edge]:
                visited[edge] = weight #–µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—å—à–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                path[edge] = min_node

    return visited, path

g = Graph()
g.add_node("A")
g.add_node("B")
g.add_node("C")
g.add_node("D")
g.add_node("E")

g.add_edge("A", "B", 6)
g.add_edge("A", "D", 1)
g.add_edge("D", "B", 2)
g.add_edge("D", "E", 1)
g.add_edge("B", "E", 2)
g.add_edge("B", "C", 5)
g.add_edge("E", "C", 5)

print("–ö—Ä–∞—Ç—á–∞–π—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–æ—á–∫–∏ A:")
distances, paths = dijkstra(g, "A")
print(distances)

print("\n–ü—É—Ç–∏:")
print(paths)

"""–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
* –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä–∞—Ñ–æ–≤ –±–µ–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤

–°–ª–æ–∂–Ω–æ—Å—Ç—å:
* –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: O(|V|¬≤)

–†–µ–∑—É–ª—å—Ç–∞—Ç:
* visited - –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —É–∑–ª–æ–≤
* path - —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤

**–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–µ–π–∫—Å—Ç—Ä—ã**

–ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã –Ω–∞—Ö–æ–¥–∏—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–µ –ø—É—Ç–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –≥—Ä–∞—Ñ–∞ –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –í–æ—Ç –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏:

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
* –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä–∞—Ñ–æ–≤ –±–µ–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
* –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∂–∞–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é ‚Äî –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤—ã–±–∏—Ä–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –≤–µ—Ä—à–∏–Ω—É
* –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤

üìù –ü–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã = 0
* –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = ‚àû
* –°–æ–∑–¥–∞—ë–º –¥–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ –∏ –Ω–µ–ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã


–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–ø–æ–∫–∞ –µ—Å—Ç—å –Ω–µ–ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã):
1. –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—à–∏–Ω—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –∏–∑ –Ω–µ–ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö
2. –ü–æ–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—É—é
3. –î–ª—è –≤—Å–µ—Ö –µ—ë —Å–æ—Å–µ–¥–µ–π:

* –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—à–∏–Ω—ã) + (–≤–µ—Å —Ä–µ–±—Ä–∞)
* –ï—Å–ª–∏ –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º

–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
* –ö–æ–≥–¥–∞ –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã –ø–æ—Å–µ—â–µ–Ω—ã –∏–ª–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã
* –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö –≤–µ—Ä—à–∏–Ω

–ü—Ä–∏–º–µ—Ä:
```
        A
      / | \
     6  1  3
    /   |   \
   B    D    F
    \  / \  /
     2  3  1
      \/ \/
      C   E
```

–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–∑ A:

–†–∞—Å—Å—Ç–æ—è–Ω–∏—è: A=0, B=‚àû, C=‚àû, D=‚àû, E=‚àû, F=‚àû

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º A:

B: 0+6=6

D: 0+1=1

F: 0+3=3

–í—ã–±–∏—Ä–∞–µ–º D (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ 1)

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º D:

B: 1+2=3 (–ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ 6)

C: 1+3=4

E: 1+1=2

–í—ã–±–∏—Ä–∞–µ–º E (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 2)

–ò —Ç–∞–∫ –¥–∞–ª–µ–µ...

##2: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞ 3.
"""

numbers = [int(x) for x in input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").split()]

# –§–∏–ª—å—Ç—Ä—É–µ–º —á–∏—Å–ª–∞, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ 3, –∏ –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
numbers_ending_with_3 = [num for num in numbers if num % 10 == 3]

if numbers_ending_with_3:
    min_number = min(numbers_ending_with_3)
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞ 3: {min_number}")
else:
    print("–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç —á–∏—Å–µ–ª, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –Ω–∞ 3")

"""##3: –£—á–∏—Ç—ã–≤–∞—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n , –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è n-–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏"""

def fibonacci_iterative(n): #–∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥; —Å–ª–æ–∂–Ω–æ—Å—Ç—å - O(n); –ø–∞–º—è—Ç—å - O(1)
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a

def fibonacci_binet(n): #—Ñ–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ - –¥–∞–µ—Ç —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è n < 70 –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    phi = (1 + 5**0.5) / 2
    return round(phi**n / 5**0.5)


from functools import lru_cache #–º–µ–º–æ–∏–∑–∞—Ü–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏—è, —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n) –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@lru_cache(maxsize=None)
def fibonacci_memo(n):
    if n <= 1:
        return n
    return fibonacci_memo(n-1) + fibonacci_memo(n-2)

def fibonacci_recursive(n): #–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä–µ–∫—É—Ä—Å–∏—è - –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö n, —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(2^n)
    if n <= 1:
        return n
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

"""##4: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –±–∏–Ω–∞—Ä–Ω—É—é –∫—É—á—É –∏ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫—É—á—É –∏ –≤–µ—Ä–Ω—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –∫—É—á—É."""

def insert_into_heap(heap, new_element):
    heap.append(new_element)  #–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –∫—É—á–∏
    current_index = len(heap) - 1  #–ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

    #–ü—Ä–æ—Å–µ–∏–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö
    while current_index > 0:
        parent_index = (current_index - 1) // 2

        if heap[current_index] < heap[parent_index]: #–ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ —Ä–æ–¥–∏—Ç–µ–ª—è, –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏
            heap[current_index], heap[parent_index] = heap[parent_index], heap[current_index]
            current_index = parent_index
        else:
            break  #–ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∫—É—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

    return heap

heap = [1, 3, 6, 5, 9, 8]  #–ò—Å—Ö–æ–¥–Ω–∞—è min-heap
new_element = 4
new_heap = insert_into_heap(heap, new_element)
print(new_heap)  #–í—ã–≤–µ–¥–µ—Ç [1, 3, 4, 5, 9, 8, 6] –∏–ª–∏ –¥—Ä—É–≥—É—é –≤–∞–ª–∏–¥–Ω—É—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É

"""–ü–æ—è—Å–Ω–µ–Ω–∏–µ:
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ (–∫—É—á–∏).

–ü—Ä–æ—Å–µ–∏–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö: –ü–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è, –æ–Ω –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö.

–ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –∫–æ—Ä–µ–Ω—å (–∏–Ω–¥–µ–∫—Å 0) –∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –∫—É—á–∏ (heap[current] >= heap[parent]) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω—ë–Ω–Ω–∞—è –∫—É—á–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–≠—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –∫—É—á–∞ —è–≤–ª—è–µ—Ç—Å—è min-heap (–Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–Ω–µ). –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è max-heap, –∏–∑–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –≤ if –Ω–∞ heap[current_index] > heap[parent_index].

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: O(log n), —Ç–∞–∫ –∫–∞–∫ –≥–ª—É–±–∏–Ω–∞ –∫—É—á–∏ (–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π) –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ.

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∏–Ω–∞—Ä–Ω—É—é –∫—É—á—É (—Å –ø—Ä–æ—Å–µ–∏–≤–∞–Ω–∏–µ–º –≤–≤–µ—Ä—Ö, sift-up) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(log n) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—É—á–µ.

##5: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –∏ –≤–µ—Ä–Ω—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
"""

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def delete_node(head: ListNode, index: int) -> ListNode:
    if index < 0:
        return head  #–ò–Ω–¥–µ–∫—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    if index == 0:
        return head.next if head else None  #–£–¥–∞–ª—è–µ–º –≥–æ–ª–æ–≤—É

    current = head
    prev = None
    count = 0

    #–ò—â–µ–º —É–∑–µ–ª —Å –Ω—É–∂–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    while current and count < index:
        prev = current
        current = current.next
        count += 1

    if current:  #–ï—Å–ª–∏ —É–∑–µ–ª –Ω–∞–π–¥–µ–Ω
        prev.next = current.next  #"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º" —É–¥–∞–ª—è–µ–º—ã–π —É–∑–µ–ª

    return head

#–°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫: 1 -> 2 -> 3 -> 4 -> 5
head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))

#–£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 2 (–∑–Ω–∞—á–µ–Ω–∏–µ 3)
new_head = delete_node(head, 2)

#–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 1 -> 2 -> 4 -> 5
current = new_head
while current:
    print(current.val, end=" -> ")
    current = current.next
#–í—ã–≤–æ–¥: 1 -> 2 -> 4 -> 5 ->

"""–ü–æ—è—Å–Ω–µ–Ω–∏–µ
–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤:
*   –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —Å–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.
*   –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å 0, —É–¥–∞–ª—è–µ—Ç—Å—è –≥–æ–ª–æ–≤–∞ —Å–ø–∏—Å–∫–∞, –∏ –Ω–æ–≤–∞—è –≥–æ–ª–æ–≤–∞ ‚Äî head.next.


–ü–æ–∏—Å–∫ —É–¥–∞–ª—è–µ–º–æ–≥–æ —É–∑–ª–∞:
1.   –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –Ω—É–∂–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.
2.   –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ (current == None), –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º.

–£–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞:
*   –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º prev.next –Ω–∞ current.next, –∏—Å–∫–ª—é—á–∞—è —É–∑–µ–ª –∏–∑ —Ü–µ–ø–æ—á–∫–∏.

–°–ª–æ–∂–Ω–æ—Å—Ç—å
–í—Ä–µ–º—è: O(n) ‚Äî –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Ö–æ–¥–∏–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫.
–ü–∞–º—è—Ç—å: O(1) ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞–º—è—Ç—å.

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –º–∞—Å—Å–∏–≤–æ–º)
–ï—Å–ª–∏ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ Python (list), —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ: —á–µ—Ä–µ–∑ pop()

##6: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ –¥–µ—Å—è—Ç–µ—Ä–∏—á–Ω—É—é –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.
"""

binary_number = input("–í–≤–µ–¥–∏—Ç–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ").strip()

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ 0 –∏ 1)
if not all(char in '01' for char in binary_number):
    print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ!")
else:
    #–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É (int —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 2)
    decimal_number = int(binary_number, 2)

    #–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É (hex)
    hexadecimal_number = hex(decimal_number)

    print(f"–î–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: {binary_number}")
    print(f"–î–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: {decimal_number}")
    print(f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: {hexadecimal_number}")

"""–ü–æ—è—Å–Ω–µ–Ω–∏–µ
–í–≤–æ–¥ –¥–≤–æ–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞:
*   –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ 0 –∏ 1.
*   –ï—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É:
* –§—É–Ω–∫—Ü–∏—è int(binary_number, 2) –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.

–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É:
*–§—É–Ω–∫—Ü–∏—è hex() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É —Å —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x).
"""

#—Ä—É—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
binary_number = input("–í–≤–µ–¥–∏—Ç–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ").strip()

if not all(char in '01' for char in binary_number):
    print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ!")
else:
    decimal = 0
    for i, bit in enumerate(reversed(binary_number)): #–ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–≤–æ–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∏—Ç—ã –æ—Ç –º–ª–∞–¥—à–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –∫ —Å—Ç–∞—Ä—à–µ–º—É
        decimal += int(bit) * (2 ** i) #enumerate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—ã (–∏–Ω–¥–µ–∫—Å, –±–∏—Ç) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–π –±–∏—Ç —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 2^i, –≥–¥–µ i - –µ–≥–æ –ø–æ–∑–∏—Ü–∏—è
        #—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ decimal


    hex_digits = []
    num = decimal
    if num == 0:
        hex_digits.append('0')
    else:
        while num > 0:
            remainder = num % 16
            if remainder < 10:
                hex_digits.append(str(remainder))
            else:
                hex_digits.append(chr(ord('A') + remainder - 10)) #–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤ –±—É–∫–≤—É, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 10 –∏ –¥–µ–ª–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
            num = num // 16
    hexadecimal = '0x' + ''.join(reversed(hex_digits)) #–ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ, —Ç.–∫. –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–Ω–æ –±—ã–ª–æ —É –Ω–∞—Å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ

    print(f"–î–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: {decimal}")
    print(f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: {hexadecimal}")

"""##7: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –¥–æ–ª—é –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ."""

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
input_string = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤
vowels = {'–∞', '–µ', '—ë', '–∏', '–æ', '—É', '—ã', '—ç', '—é', '—è'}

# –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö
total_letters = 0
vowel_count = 0

for char in input_string.lower():  # –ü—Ä–∏–≤–æ–¥–∏–º —Å–∏–º–≤–æ–ª –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if char.isalpha():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π
        total_letters += 1
        if char in vowels:
            vowel_count += 1

# –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª—é –≥–ª–∞—Å–Ω—ã—Ö
if total_letters > 0:
    vowel_ratio = vowel_count / total_letters
else:
    vowel_ratio = 0.0

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(f"–î–æ–ª—è –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ —Å—Ç—Ä–æ–∫–µ: {vowel_ratio:.2%}")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã

"""##8: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–≤–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ a + i*b –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∏—Ö —Å—É–º–º—É, —Ä–∞–∑–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞. –î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –ù–ï–õ–¨–ó–Ø :) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö complex."""

def parse_complex_number(s):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 'a + i*b' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (a, b)."""
    s = s.replace(' ', '')  #—É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    parts = s.split('+') #—Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ +
    a = float(parts[0]) #–≤—ã–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å
    b_part = parts[1].replace('i*', '')
    b = float(b_part) #—É–¥–∞–ª—è–µ–º i* –∏–∑ –º–Ω–∏–º–æ–π —á–∞—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    return (a, b)

def complex_sum(z1, z2):
    """–°—É–º–º–∞ –¥–≤—É—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª (a1, b1) + (a2, b2) = (a1 + a2, b1 + b2)."""
    return (z1[0] + z2[0], z1[1] + z2[1])

def complex_diff(z1, z2):
    """–†–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª (a1, b1) - (a2, b2) = (a1 - a2, b1 - b2)."""
    return (z1[0] - z2[0], z1[1] - z2[1])

def complex_mult(z1, z2):
    """–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª (a1, b1) * (a2, b2) = (a1*a2 - b1*b2, a1*b2 + a2*b1)."""
    a = z1[0] * z2[0] - z1[1] * z2[1]
    b = z1[0] * z2[1] + z2[0] * z1[1]
    return (a, b)

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
z1_str = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 + i*3): ")
z2_str = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1 + i*4): ")

# –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª
z1 = parse_complex_number(z1_str)
z2 = parse_complex_number(z2_str)

# –í—ã—á–∏—Å–ª–µ–Ω–∏—è
sum_result = complex_sum(z1, z2)
diff_result = complex_diff(z1, z2)
mult_result = complex_mult(z1, z2)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
print(f"–°—É–º–º–∞: {sum_result}")
print(f"–†–∞–∑–Ω–æ—Å—Ç—å: {diff_result}")
print(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {mult_result}")

# –ò–ª–∏ –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞
result_tuple = (sum_result, diff_result, mult_result)
print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞:")
print(result_tuple)

"""##9: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –º–µ—Ç–æ–¥–æ–º –ø—É–∑—ã—Ä—å–∫–∞"""

def bubble_sort(arr):
    n = len(arr)
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É n-1 —Ä–∞–∑
    for i in range(n - 1):
        #–§–ª–∞–≥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
        swapped = False
        #–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É –æ—Ç 0 –¥–æ n-i-1
        for j in range(n - i - 1):
            #–ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –±–æ–ª—å—à–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ, –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        #–ï—Å–ª–∏ –∑–∞ –ø—Ä–æ—Ö–æ–¥ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫, –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        if not swapped:
            break
    return arr

numbers = [64, 34, 25, 12, 22, 11, 90]
sorted_numbers = bubble_sort(numbers)
print(sorted_numbers)  # [11, 12, 22, 25, 34, 64, 90]

"""–ü–æ—è—Å–Ω–µ–Ω–∏–µ:
* –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª (for i in range(n - 1)) –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ –ø–æ –º–∞—Å—Å–∏–≤—É. –î–ª—è –º–∞—Å—Å–∏–≤–∞ –∏–∑ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å n-1 –ø—Ä–æ—Ö–æ–¥–æ–≤.

* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª (for j in range(n - i - 1)) —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–∞—Ä—ã —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –º–µ–Ω—è–µ—Ç –∏—Ö –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–æ—è—Ç –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –° –∫–∞–∂–¥—ã–º –ø—Ä–æ—Ö–æ–¥–æ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —ç–ª–µ–º–µ–Ω—Ç "–≤—Å–ø–ª—ã–≤–∞–µ—Ç" –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞, –ø–æ—ç—Ç–æ–º—É –≥—Ä–∞–Ω–∏—Ü–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ i.

* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (swapped): –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–¥–∞ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏, –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –∏ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥–æ—Å—Ä–æ—á–Ω–æ.

–°–ª–æ–∂–Ω–æ—Å—Ç—å:
* –•—É–¥—à–∏–π —Å–ª—É—á–∞–π: O(n¬≤) ‚Äî –∫–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
* –õ—É—á—à–∏–π —Å–ª—É—á–∞–π: O(n) ‚Äî –∫–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π).
* –°—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: O(n¬≤) ‚Äî –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –¥–ª—è –º–∞—Å—Å–∏–≤–∞ [5, 3, 8, 4, 2]:
1. –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: [3, 5, 4, 2, 8] (8 "–≤—Å–ø–ª—ã–ª" –≤ –∫–æ–Ω–µ—Ü)
2. –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: [3, 4, 2, 5, 8] (5 –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ)
3. –¢—Ä–µ—Ç–∏–π –ø—Ä–æ—Ö–æ–¥: [3, 2, 4, 5, 8] (4 –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ)
4. –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –ø—Ä–æ—Ö–æ–¥: [2, 3, 4, 5, 8] (–º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)

##10: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –º–µ—Ç–æ–¥–æ–º —Å–ª–∏—è–Ω–∏—è.
"""

def merge_sort(arr):
    if len(arr) > 1:
        #–ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
        mid = len(arr) // 2
        #–î–µ–ª–∏–º –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã
        left_half = arr[:mid]
        right_half = arr[mid:]

        #–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–ª–æ–≤–∏–Ω—É
        merge_sort(left_half)
        merge_sort(right_half)

        #–°–ª–∏—è–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ–≤–∏–Ω
        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        #–î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ left_half
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        #–î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ right_half
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

    return arr

numbers = [38, 27, 43, 3, 9, 82, 10]
sorted_numbers = merge_sort(numbers.copy())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy(), —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
print("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤:", numbers)
print("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤:", sorted_numbers)

"""–ü–æ—è—Å–Ω–µ–Ω–∏–µ

–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ:
* –ú–∞—Å—Å–∏–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –ø–æ–¥–º–∞—Å—Å–∏–≤—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏).

–°–ª–∏—è–Ω–∏–µ:
* –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è:
* –°—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.
* –ú–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –º–∞—Å—Å–∏–≤.
* –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞ –æ–¥–∏–Ω –∏–∑ –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤ –Ω–µ –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.
* –û—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤–∞.

–°–ª–æ–∂–Ω–æ—Å—Ç—å:
* –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n) –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö (—Ö—É–¥—à–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –ª—É—á—à–∏–π).
* –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤).

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
* –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤).
* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
* –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å).

–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
* –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ O(n).
* –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –≤—Å—Ç–∞–≤–∫–∞–º–∏).

#2: –û—Å–Ω–æ–≤—ã SQL

##1: –î–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ª–µ—Ç–∞–≤—à–∏—Ö —É –æ–∫–Ω–∞ (–º–µ—Å—Ç–∞ a –∏–ª–∏ d) –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –∏–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ (–æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ), –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞, –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞.

```
SELECT tb1.name AS Name_psg,
  tb2.name AS Name_comp,
  tb3.date_trip + tb4.time_out AS dt_out,
  tb4.town_from,
  tb4.town_to
FROM _GIA.dbo.Passenger AS tb1
LEFT JOIN _GIA.dbo.Pass_in_trip AS tb3 ON tb1.Id_psg = tb3.id_psg
LEFT JOIN _GIA.dbo.Trip AS tb4 ON tb3.trip_no = tb4.trip_no
LEFT JOIN _GIA.dbo.Company AS tb2 ON tb4.id_comp = tb2.Id_comp
WHERE tb3.place LIKE '%a'
  OR tb3.place LIKE '%d'
```

##2: –î–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Trip –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ª–µ—Ç–æ–≤ –∏ –ø—Ä–∏–ª–µ—Ç–æ–≤ –∑–∞ –∞–ø—Ä–µ–ª—å 2025 –≥–æ–¥–∞.

```
SELECT
    town AS Town,
    COUNT(CASE WHEN direction = 'out' THEN 1 END) AS —Ånt_out,
    COUNT(CASE WHEN direction = 'in' THEN 1 END) AS —Ånt_in
FROM (
    SELECT DISTINCT t1.town_from AS town,
        'out' AS direction,
        t1.trip_no,
        t2.date_trip
    FROM _GIA.dbo.Trip as t1
    JOIN _GIA.dbo.Pass_in_trip as t2 ON t1.trip_no = t2.trip_no
    WHERE MONTH(t2.date_trip) = 4 AND YEAR(t2.date_trip) = 2025
    
    UNION
    
    SELECT DISTINCT t1.town_to AS town,
        'in' AS direction,
        t1.trip_no,
        t2.date_trip
    FROM _GIA.dbo.Trip as t1
    JOIN _GIA.dbo.Pass_in_trip as t2 ON t1.trip_no = t2.trip_no
    WHERE MONTH(t2.date_trip) = 4 AND YEAR(t2.date_trip) = 2025
) AS combined
GROUP BY town
```

##3: –î–ª—è –∫–∞–∂–¥–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–∞–º–æ–ª–µ—Ç–æ–≤.

```
SELECT DISTINCT tb1.name,
  tb2.plane,
  COUNT(tb3.id_psg)
FROM _GIA.dbo.Company as tb1
LEFT JOIN _GIA.dbo.Trip as tb2 ON tb1.id_comp = tb2.id_comp
LEFT JOIN _GIA.dbo.Pass_in_trip as tb3 ON tb2.trip_no = tb3.trip_no
GROUP BY tb1.name,
  tb2.plane
HAVING COUNT(tb3.id_psg) <> 0
```

##4: –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–∞–º–æ–ª–µ—Ç–æ–≤.

```
SELECT tb1.name,
  tb2.plane,
  COUNT(tb3.id_psg) AS cnt_trip
FROM _GIA.dbo.Passenger AS tb1
LEFT JOIN _GIA.dbo.Pass_in_trip as tb3 ON tb1.Id_psg = tb3.id_psg
LEFT JOIN _GIA.dbo.Trip AS tb2 ON tb2.trip_no = tb3.trip_no
GROUP BY tb1.name, tb1.Id_psg, tb2.plane
HAVING COUNT(tb3.id_psg) <> 0
ORDER BY tb1.name,
  COUNT(tb3.id_psg) DESC
```

##5: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º–∏ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –≥–æ–¥–∞–º.

```
SELECT t1.name,
  MONTH(t2.date_trip) AS month_trip,
  YEAR(t2.date_trip) AS year_trip,
  COUNT(t2.id_psg) AS cnt_trip
from _GIA.dbo.Company AS t1
LEFT JOIN _GIA.dbo.Trip AS t3 ON t1.Id_comp = t3.id_comp
LEFT JOIN _GIA.dbo.Pass_in_trip AS t2 ON t2.trip_no = t3.trip_no
GROUP BY t1.name,
  MONTH(t2.date_trip),
  YEAR(t2.date_trip)
HAVING COUNT(t2.id_psg) > 0
ORDER BY month_trip ASC,
  year_trip ASC,
  cnt_trip DESC
```

##6: –î–ª—è –∫–∞–∂–¥–æ–π –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—ã—Ö –ø–æ —á–µ—Ç–Ω—ã–º –∏ –Ω–µ—á–µ—Ç–Ω—ã–º —á–∏—Å–ª–∞–º.

```
SELECT
    t1.name AS name,
    SUM(CASE WHEN DAY(t3.date_trip) % 2 = 0 THEN 1 ELSE 0 END) AS cnt_even,
    SUM(CASE WHEN DAY(t3.date_trip) % 2 = 1 THEN 1 ELSE 0 END) AS cnt_odd
FROM
    _GIA.dbo.Company t1
LEFT JOIN
    _GIA.dbo.Trip t2 ON t1.id_comp = t2.id_comp
LEFT JOIN
    _GIA.dbo.Pass_in_trip t3 ON t2.trip_no = t3.trip_no
GROUP BY
    t1.name
HAVING
    SUM(CASE WHEN DAY(t3.date_trip) % 2 = 0 THEN 1 ELSE 0 END) > 0
    OR SUM(CASE WHEN DAY(t3.date_trip) % 2 = 1 THEN 1 ELSE 0 END) > 0
```

##7: –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–π—Å–∞ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.

```
SELECT t1.trip_no,
  t3.name,
  t1.town_from,
  t1.town_to,
  COUNT(DISTINCT t2.date_trip) AS cnt_trip,
  COUNT(DISTINCT t2.id_psg) AS cnt_psg
FROM _GIA.dbo.Trip AS t1
LEFT JOIN _GIA.dbo.Pass_in_trip AS t2 ON t1.trip_no = t2.trip_no
LEFT JOIN _GIA.dbo.Company AS t3 ON t1.id_comp = t3.Id_comp
GROUP BY t1.trip_no,
  t3.name,
  t1.town_from,
  t1.town_to
```

#3: –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫

##1 (–≤–æ–∑–º–æ–∂–Ω–æ, —É–±—Ä–∞–ª–∏): –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å API-—Å–µ—Ä–≤–∏—Å, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —è–∑—ã–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ–¥—Ö–æ–¥–∞ RAG.  

–í –∫–∞—á–µ—Å—Ç–≤–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è RAG –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è Wiki –±–∞–∑–∞ –ø–æ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—Å–ª–æ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ XML-—Ñ–∞–π–ª–æ–≤.


---


*–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞:*

- –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞. –§–∞–π–ª—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏ `./source_data/`. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é —É–¥–æ–±–Ω—É—é
–º–æ–¥–µ–ª—å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ embedding'–∞.

- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –ë–î. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é
–ë–î, –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

- –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω–∞
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ¬´–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞¬ª. –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è
–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, —Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ¬´–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã¬ª




- –ü—Ä–∏–µ–º –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´http://—Å–µ—Ä–≤–µ—Ä/llm¬ª —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å: –ü–∞—Ä–∞–º–µ—Ç—Ä ¬´query¬ª -> –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ. -> –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å.

–ú–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª—é–±–∞—è –º–æ–¥–µ–ª—å –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–∫ –∏ —Å–µ—Ç–µ–≤–∞—è (–ü—Ä–∏–º–µ—Ä: Gigachat API –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü).

- –û—Ç–≤–µ—Ç LLM –≤ —Ñ–æ—Ä–º–∞—Ç–µ { ‚Äúanswer‚Äù: –æ—Ç–≤–µ—Ç LLM } –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞
—Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´http://—Å–µ—Ä–≤–µ—Ä/llm¬ª.



---


*–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ*

–ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–ó–∞–ø—É—â–µ–Ω–Ω—ã–π web-–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω:

- –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

- –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

- –ü—Ä–∏–Ω—è—Ç—å –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü—Ä–∏–º–µ—Ä:
http://—Å–µ—Ä–≤–µ—Ä/llm?query=–≤–æ–ø—Ä–æ—Å)

- –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ http://—Å–µ—Ä–≤–µ—Ä/llm

- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—É –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ XML-—Ñ–∞–π–ª–æ–≤


---


*–£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ:*

- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏ –ø–æ–¥—Ö–æ–¥–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏
–≤—ã–¥–∞–≤–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–ª–∞–≥–∞–µ–º—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ü—Ä–∏–º–µ—Ä:
–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã, –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞, –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫,
–ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:*

- –î–æ–ø. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Python 3.9 –∏–ª–∏ –≤—ã—à–µ. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ XML —Ñ–∞–π–ª–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ

–º–æ–¥–µ–ª–µ–π

- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: –í–∞—à —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
–æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ XML —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ LLM
(–µ—Å–ª–∏ –æ–Ω–∞ —Å–µ—Ç–µ–≤–∞—è). –û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª log-–¥–∞—Ç–∞.txt
–≤ –ø–∞–ø–∫–µ `./logs/`. –û–¥–∏–Ω —Ñ–∞–π–ª —Å –ª–æ–≥–æ–º –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞,
–≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ª—é–±—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–≥–æ –∑–∞–ª–æ–∂–µ–Ω—ã –Ω–∞ —è–∑—ã–∫–µ —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown

- –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Open Source –º–æ–¥–µ–ª–µ–π –∏ –ª—é–±—ã—Ö,
–æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö LLM —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ-–±–µ—Å–ø–ª–∞—Ç–Ω—ã–º
–¥–æ—Å—Ç—É–ø–æ–º. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π, –∫–ª—é—á–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã
–±—ã—Ç—å –≤–Ω–µ—Å–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.


---


*–†–µ–∑—É–ª—å—Ç–∞—Ç:*

- –§–∞–π–ª—ã —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º

- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–∏

–ö–æ–ø–∏—Ä—É–µ–º –æ—Ç—Å—é–¥–∞: https://github.com/FireStrike1010/open_ai_api_with_knowledge_base/tree/main

##2: –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∏–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º—ã–π –æ—Ç—á–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.
"""

import spacy
from textblob import TextBlob
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è NER
nlp = spacy.load('en_core_web_sm')

def analyze_text(file_path):
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(file_path, 'r', encoding='utf-8') as file:
        text = file.read()

    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    blob = TextBlob(text)
    sentiment = blob.sentiment

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    doc = nlp(text)
    entities = [(ent.text, ent.label_) for ent in doc.ents]

    # –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å—É—â–Ω–æ—Å—Ç–µ–π
    entity_counts = Counter([label for _, label in entities])

    return {
        'text': text,
        'sentiment': sentiment,
        'entities': entities,
        'entity_counts': entity_counts
    }

def generate_report(data, output_file):
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π
    entities_df = pd.DataFrame(data['entities'], columns=['Entity', 'Type'])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Counter –≤ DataFrame –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    entity_counts_df = pd.DataFrame.from_dict(data['entity_counts'], orient='index').reset_index()
    entity_counts_df.columns = ['Entity Type', 'Count']

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    plt.figure(figsize=(12, 6))

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
    plt.subplot(1, 2, 1)
    entity_counts_df.plot(x='Entity Type', y='Count', kind='bar', legend=False)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π')
    plt.xlabel('–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

    # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    plt.subplot(1, 2, 2)
    plt.bar(['Polarity', 'Subjectivity'], [data['sentiment'].polarity, data['sentiment'].subjectivity])
    plt.title('–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞')
    plt.ylim(-1, 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    plt.tight_layout()
    plt.savefig('analysis_plots.png')

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–æ—Ç—á–µ—Ç
    html = f"""
    <html>
        <head>
            <title>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                h1 {{ color: #2e6c80; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
                img {{ max-width: 100%; height: auto; }}
            </style>
        </head>
        <body>
            <h1>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞</h1>

            <h2>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p>–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(data['text'])} —Å–∏–º–≤–æ–ª–æ–≤</p>
            <p>–ü–æ–ª—è—Ä–Ω–æ—Å—Ç—å: {data['sentiment'].polarity:.2f} (–æ—Ç -1 –¥–æ 1)</p>
            <p>–°—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['sentiment'].subjectivity:.2f} (–æ—Ç 0 –¥–æ 1)</p>

            <h2>–ò–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–≤—Å–µ–≥–æ {len(data['entities'])}</h2>
            {entities_df.to_html(index=False)}

            <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å—É—â–Ω–æ—Å—Ç–µ–π</h2>
            {entity_counts_df.to_html(index=False)}

            <h2>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</h2>
            <img src="analysis_plots.png" alt="–ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞">
        </body>
    </html>
    """

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    input_file = '/content/example.txt'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ñ–∞–π–ª
    output_file = 'text_analysis_report.html'

    analysis_data = analyze_text(input_file)
    generate_report(analysis_data, output_file)
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")

"""##3: –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.

–£ –Ω–∞—Å –±—ã–ª —Ç–∞–∫–æ–π –∫—É—Ä—Å–∞—á –≤ 3 —Å–µ–º–µ—Å—Ç—Ä–µ: https://colab.research.google.com/drive/115cGa7BWsd2p2GHlZBEsLw0hJvjTdFfH?usp=sharing

XLSX-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–∞—Ç—å —Ç—É—Ç: https://1drv.ms/x/c/af7b7be8c145f43b/ETv0RcHoe3sggK9UEwMAAAABXVhJef6PHFc8vvJNpdmCBA?e=1cd7SD

##4: –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏, word2vec, Skip-Gram.
"""

import numpy as np
from gensim.models import Word2Vec, KeyedVectors
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sentence_transformers import SentenceTransformer
import spacy
from collections import defaultdict

# 1. –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
def read_and_preprocess(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        text = f.read()

    # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é spaCy
    nlp = spacy.load('en_core_web_sm')
    doc = nlp(text)
    sentences = [sent.text for sent in doc.sents]
    tokenized_sentences = [[token.text.lower() for token in sent if token.is_alpha]
                         for sent in doc.sents]

    return text, sentences, tokenized_sentences

# 2. –ú–µ—Ç–æ–¥—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class TextVectorizer:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        self.glove_model = KeyedVectors.load_word2vec_format('glove.6B.100d.txt', binary=False)
        self.sbert_model = SentenceTransformer('all-MiniLM-L6-v2')
        self.nlp = spacy.load('en_core_web_md')

    # –ú–µ—Ç–æ–¥ Bag-of-Words
    def bow_vectorization(self, sentences):
        vectorizer = CountVectorizer()
        X = vectorizer.fit_transform(sentences)
        return X.toarray()

    # –ú–µ—Ç–æ–¥ TF-IDF
    def tfidf_vectorization(self, sentences):
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(sentences)
        return X.toarray()

    # Word2Vec (–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–≤–æ–µ–º –∫–æ—Ä–ø—É—Å–µ)
    def word2vec_vectorization(self, tokenized_sentences, size=100, window=5, sg=0):
        model = Word2Vec(tokenized_sentences, vector_size=size, window=window, sg=sg, min_count=1)
        return model

    # Skip-Gram (–≤–∞—Ä–∏–∞–Ω—Ç Word2Vec)
    def skipgram_vectorization(self, tokenized_sentences, size=100, window=5):
        return self.word2vec_vectorization(tokenized_sentences, size=size, window=window, sg=1)

    # GloVe (–ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã)
    def glove_vectorization(self, tokenized_sentences):
        sentence_vectors = []
        for sentence in tokenized_sentences:
            vectors = [self.glove_model[word] for word in sentence if word in self.glove_model]
            if vectors:
                sentence_vectors.append(np.mean(vectors, axis=0))
            else:
                sentence_vectors.append(np.zeros(self.glove_model.vector_size))
        return np.array(sentence_vectors)

    # FastText (–ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã)
    def fasttext_vectorization(self, tokenized_sentences):
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ GloVe, –Ω–æ —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é
        pass

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ (Sentence-BERT)
    def sbert_vectorization(self, sentences):
        return self.sbert_model.encode(sentences)

    # spaCy –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    def spacy_vectorization(self, sentences):
        return np.array([self.nlp(sent).vector for sent in sentences])

# 3. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    file_path = 'example.txt'
    text, sentences, tokenized_sentences = read_and_preprocess(file_path)

    vectorizer = TextVectorizer()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    methods = {
        'BoW': vectorizer.bow_vectorization,
        'TF-IDF': vectorizer.tfidf_vectorization,
        'Word2Vec': lambda s: vectorizer.word2vec_vectorization(tokenized_sentences),
        'Skip-Gram': lambda s: vectorizer.skipgram_vectorization(tokenized_sentences),
        'GloVe': lambda s: vectorizer.glove_vectorization(tokenized_sentences),
        'Sentence-BERT': vectorizer.sbert_vectorization,
        'spaCy': vectorizer.spacy_vectorization
    }

    results = {}
    for name, method in methods.items():
        try:
            results[name] = method(sentences)
            print(f"{name} –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {results[name].shape}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ {name}: {str(e)}")

    # –ü—Ä–∏–º–µ—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    print("\n–ü—Ä–∏–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ (–ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
    for name, vectors in results.items():
        if isinstance(vectors, np.ndarray):
            print(f"{name}: {vectors[0][:10]}")
        elif isinstance(vectors, Word2Vec):
            print(f"{name}: –ú–æ–¥–µ–ª—å Word2Vec –æ–±—É—á–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è 'the': {vectors.wv['the'][:10]}")

"""##5: –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ LLM. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–∏ –∏ —Ç–µ–∂–µ –≤–æ–ø—Ä–æ—Å—ã). –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥ –æ–± –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö LLM."""

pip install torch==2.0.1 transformers==4.30.2 pandas==2.0.2

import time
from transformers import pipeline, AutoModelForCausalLM, AutoTokenizer
import pandas as pd

def read_file(file_path):
    """–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏."""
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def initialize_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    models = {
        "GPT-2": "gpt2",
        "DistilGPT-2": "distilgpt2"
    }

    initialized_models = {}
    for name, model_path in models.items():
        try:
            tokenizer = AutoTokenizer.from_pretrained(model_path)
            model = AutoModelForCausalLM.from_pretrained(model_path)
            initialized_models[name] = pipeline(
                'text-generation',
                model=model,
                tokenizer=tokenizer,
                device=-1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU (–¥–ª—è GPU —É–∫–∞–∂–∏—Ç–µ 0 –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω–¥–µ–∫—Å)
            )
            print(f"–ú–æ–¥–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ {name}: {str(e)}")

    return initialized_models

def generate_responses(context, questions, models):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    results = []

    for question in questions:
        prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"

        for model_name, model in models.items():
            try:
                start_time = time.time()
                response = model(
                    prompt,
                    max_length=150,
                    num_return_sequences=1,
                    truncation=True,
                    do_sample=True,
                    top_k=50,
                    top_p=0.95
                )
                generation_time = time.time() - start_time

                answer = response[0]['generated_text'].replace(prompt, "").strip()

                results.append({
                    "–ú–æ–¥–µ–ª—å": model_name,
                    "–í–æ–ø—Ä–æ—Å": question,
                    "–û—Ç–≤–µ—Ç": answer,
                    "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å–µ–∫)": round(generation_time, 2)
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª—å—é {model_name}: {str(e)}")
                results.append({
                    "–ú–æ–¥–µ–ª—å": model_name,
                    "–í–æ–ø—Ä–æ—Å": question,
                    "–û—Ç–≤–µ—Ç": f"–û—à–∏–±–∫–∞: {str(e)}",
                    "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å–µ–∫)": 0
                })

    return pd.DataFrame(results)

def save_report(df, output_file):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("–û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π LLM\n\n")
        f.write(df.to_markdown(index=False))

def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    input_file = "context.txt"  # –§–∞–π–ª —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    output_file = "report.md"   # –§–∞–π–ª –¥–ª—è –æ—Ç—á–µ—Ç–∞
    questions = [               # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞?",
        "–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å?",
        "–ö–∞–∫–∏–µ –≤—ã–≤–æ–¥—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞?"
    ]

    try:
        # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = read_file(input_file)
        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        models = initialize_models()
        if not models:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏")
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        results_df = generate_responses(context, questions, models)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        save_report(results_df, output_file)
        print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(results_df.to_markdown(index=False))

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()

"""# 4: –°–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python

##1: –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 7 –ì–± –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 3 –º–∏–Ω—É—Ç—ã.
"""

def read_large_file(file_path):
    data = []
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:  # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–ª–µ–Ω–∏–≤–æ–µ)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤)
            processed_line = line.strip()
            if processed_line:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                data.append(processed_line)
    return data

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
file_path = 'your_large_file.txt'
data_array = read_large_file(file_path)
print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data_array)} —Å—Ç—Ä–æ–∫.")

"""–ü–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª—É (for line in file), —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å.

–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è: Python –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –õ—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞.
"""

#–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
from concurrent.futures import ThreadPoolExecutor

def read_file_chunk(start, end, file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        file.seek(start)
        chunk = file.read(end - start)
    return chunk.splitlines()

def parallel_read(file_path, chunk_size=1024*1024*64):  # 64MB —á–∞–Ω–∫–∏
    from os import path
    file_size = path.getsize(file_path)
    chunks = [(i, min(i + chunk_size, file_size)) for i in range(0, file_size, chunk_size)]

    with ThreadPoolExecutor() as executor:
        results = list(executor.map(lambda x: read_file_chunk(*x, file_path), chunks))
    return [line for chunk in results for line in chunk]

#—é–∑–∞–µ–º numpy –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import numpy as np
data = np.loadtxt(file_path, dtype=np.float32)  # –î–ª—è —á–∏—Å–µ–ª

#–∏ pandas –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
import pandas as pd
chunks = pd.read_csv(file_path, chunksize=100000)
data = pd.concat(chunks)

"""##2: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤ –Ω–∞ —è–∑—ã–∫–µ Python, –Ω–∞–ø—Ä–∏–º–µ—Ä, X = [1, 5, 9, 0] –∏ Y = [3, 0, 2, 9]. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞."""

def find_intersection(arr1, arr2): #–¥–ª—è —Ö–µ—à–∏—Ä—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ä—Ç–µ–∂–∏
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤ —Å —É—á—ë—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞."""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ O(1)
    set_arr2 = set(arr2)
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–µ—Ä–≤–æ–º—É –º–∞—Å—Å–∏–≤—É –∏ —Å–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–º
    intersection = [x for x in arr1 if x in set_arr2]
    return intersection

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
X = [1, 5, 9, 0]
Y = [3, 0, 2, 9]
result = find_intersection(X, Y)
print(result)  # –í—ã–≤–æ–¥: [9, 0]

print(list(set(X) & set(Y))) #–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω

"""–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–∏—Å–ª–∞–º–∏, —Å—Ç—Ä–æ–∫–∞–º–∏, –∫–æ—Ä—Ç–µ–∂–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ö–µ—à–∏—Ä—É–µ–º—ã–º–∏ —Ç–∏–ø–∞–º–∏.

–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —Å–ø–∏—Å–∫–µ (arr1).

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ arr2 –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (set) –¥–∞—ë—Ç —Å—Ä–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(1) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–∂–¥–µ–Ω–∏—è, –æ–±—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å ‚Äî O(n + m).
"""

def find_intersection_unhashable(arr1, arr2): #–¥–ª—è –Ω–µ—Ö–µ—à–∏—Ä—É–µ–º—ã—Ö: —Å–ø–∏—Å–∫–∏, —Å–ª–æ–≤–∞—Ä–∏ –∏ —Ç. –¥.
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ arr2 —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ö–µ—à–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""
    intersection = []
    for x in arr1:
        if x in arr2:  # –ü–æ–∏—Å–∫ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ set (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, O(n)), —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n*m)
            intersection.append(x)
    return intersection

# –ü—Ä–∏–º–µ—Ä —Å –Ω–µ—Ö–µ—à–∏—Ä—É–µ–º—ã–º–∏ —Ç–∏–ø–∞–º–∏
X = [[1, 2], [3, 4]]
Y = [[3, 4], [5, 6]]
print(find_intersection_unhashable(X, Y))  # –í—ã–≤–æ–¥: [[3, 4]]

"""##3: –í–∞—Å–∏–ª–∏–π —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –ø–∏—à—É—Ç –≤ —Å–∫–æ–±–∫–∞—Ö (–∫–∞–∫ –≤–æ—Ç —Ç—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä), –µ–≥–æ —á–∏—Ç–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –í–æ—Ç –∏ –Ω–∞–¥—É–º–∞–ª –æ–Ω —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–∫–æ—Ä–æ—Ç–∏—Ç—å –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è, –Ω–∞–ø–∏—Å–∞–≤ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –≤—Å–µ, —á—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫. –ü–æ–º–æ–≥–∏—Ç–µ –ª–µ–Ω–∏–≤–æ–º—É –í–∞—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –≤—Å–µ, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ –∏ —Å–∞–º–∏ —ç—Ç–∏ —Å–∫–æ–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å–∫–æ–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏)."""

def remove_text_in_brackets(text):
    result = []
    stack = []

    for char in text:
        if char == '(':
            stack.append(char)  # –ù–∞—á–∞–ª–æ —Å–∫–æ–±–∫–∏
        elif char == ')' and stack:
            stack.pop()  # –ö–æ–Ω–µ—Ü —Å–∫–æ–±–∫–∏
        elif not stack:
            result.append(char)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª, –µ—Å–ª–∏ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫

    return ''.join(result)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
text = "–≠—Ç–æ (–ø—Ä–∏–º–µ—Ä (–≤–ª–æ–∂–µ–Ω–Ω—ã—Ö) —Å–∫–æ–±–æ–∫) –∏ –µ—â–µ (–æ–¥–Ω–∏) —Å–∫–æ–±–∫–∏."
clean_text = remove_text_in_brackets(text)
print(clean_text)  # –í—ã–≤–æ–¥: "–≠—Ç–æ  –∏ –µ—â–µ  —Å–∫–æ–±–∫–∏."

"""–°—Ç–µ–∫ (stack) –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫.

–ü—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ "(" –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫.

–ü—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ ")" —É–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–µ–∫–∞ (–µ—Å–ª–∏ —Å–∫–æ–±–∫–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞).

–°–∏–º–≤–æ–ª—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç (—Ç.–µ. –º—ã –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫).

##4: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 77 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞. –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ filter(), map() –∏ sum().
–ù–∞ 77 –¥–æ–ª–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ, –∞ –Ω–µ –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞.
"""

numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214,
156, 227, 228, 51, -4, 202, 58, 99, 270, 219, 94, 253, 53, 235, 9, 158, 49, 183, 166,
205, 183, 266, 180, 6, 279, 200, 208, 231, 178, 201, 260, -35, 152, 115, 79, 284, 181,
92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128, 143, 43, 297, 229, 60, 254, -9, 5, 187,
220, -8, 111, 285, 5, 263, 187, 192, -9, 268, -9, 23, 71, 135, 7, -161, 65, 135, 29, 148,
242, 33, 35, 211, 5, 161, 46, 159, 23, 169, 23, 172, 184, -7, 228, 129, 274, 73, 197,
272, 54, 278, 26, 280, 13, 171, 2, 79, -2, 183, 10, 236, 276, 4, 29, -10, 41, 269, 94,
279, 129, 39, 92, -63, 263, 219, 57, 18, 236, 291, 234, 10, 250, 0, 64, 172, 216, 30,
15, 229, 205, 123, -105]

# 1. –§–∏–ª—å—Ç—Ä—É–µ–º –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞, –¥–µ–ª—è—â–∏–µ—Å—è –Ω–∞ 77
filtered_numbers = filter(lambda x: (10 <= abs(x) <= 99) and (x % 77 == 0), numbers)

# 2. –í–æ–∑–≤–æ–¥–∏–º –∏—Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç
squared_numbers = map(lambda x: x ** 2, filtered_numbers)

# 3. –°—É–º–º–∏—Ä—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã
result = sum(squared_numbers)

print(result)

"""filter(lambda x: (10 <= abs(x) <= 99) and (x % 77 == 0), numbers)
*   10 <= abs(x) <= 99 ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —á–∏—Å–ª–æ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ (—É—á–∏—Ç—ã–≤–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ).
*   x % 77 == 0 ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ 77.

map(lambda x: x ** 2, filtered_numbers) - –í–æ–∑–≤–æ–¥–∏—Ç –∫–∞–∂–¥–æ–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç.

sum(squared_numbers) - –°—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ –∫–≤–∞–¥—Ä–∞—Ç—ã.

##5: –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —á–∞—Å—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ h:mm:ss, —Ç–æ –µ—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –ø–æ—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–æ –¥–≤—É–∑–Ω–∞—á–Ω–æ–≥–æ
—á–∏—Å–ª–∞ –Ω—É–ª—è–º–∏. –° –Ω–∞—á–∞–ª–∞ —Å—É—Ç–æ–∫ –ø—Ä–æ—à–ª–æ n —Å–µ–∫—É–Ω–¥. –í—ã–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∂—É—Ç —á–∞—Å—ã.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –í–≤–æ–¥–∏—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –í—ã–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É, —Å–æ–±–ª—é–¥–∞—è —Ç—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.
"""

n = int(input())

hours = n // 3600
remaining_seconds = n % 3600
minutes = remaining_seconds // 60
seconds = remaining_seconds % 60

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã –±—ã–ª–∏ –¥–≤—É–∑–Ω–∞—á–Ω—ã–º–∏
print(f"{hours}:{minutes:02d}:{seconds:02d}")

"""##6: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª–∞—Å—Å train —Å –¥–≤—É–º—è –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏: type –∏ speed. –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –≤–µ—Ä–Ω–∏—Ç–µ speed."""

class Train:
    def __init__(self, type, speed):
        self.type = type  # –¢–∏–ø –ø–æ–µ–∑–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π", "–≥—Ä—É–∑–æ–≤–æ–π")
        self.speed = speed  # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–µ–∑–¥–∞ (—á–∏—Å–ª–æ)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Train
my_train = Train(type="–≥—Ä—É–∑–æ–≤–æ–π", speed=120)

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–µ–∑–¥–∞
print(my_train.speed)

"""##7: –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª for –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–æ–≤ (list comprehension):

```
a = [1,2,3,4,5]
a2 = []

for i in a:
  a2.append(i + 1)
print(a2)
```




"""

a = [1, 2, 3, 4, 5]
a2 = [i + 1 for i in a]
print(a2)

"""##8: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—ã –≤–æ —Ñ—Ä–µ–π–º–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–±—ã—Ç–∏–µ, –µ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ. –î–∞—Ç–∞ –ø–æ–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '2021-01-18'. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤–æ —Ñ—Ä–µ–π–º–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—ã –Ω–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É.



```
data = {'Date': ['2021-01-18', '2021-01-20', '2021-01-23', '2021-01-25'],
        'event': ['fail', 'correct', 'fail', 'fail']}
```


"""

import pandas as pd
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º DataFrame
data = {'Date': ['2021-01-18', '2021-01-20', '2021-01-23', '2021-01-25'],
        'event': ['fail', 'correct', 'fail', 'fail']}
df = pd.DataFrame(data)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü 'Date' –≤ datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
df['Date'] = pd.to_datetime(df['Date'])

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
try:
    user_date = pd.to_datetime(input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD': "))
except ValueError:
    print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")

user_date = pd.to_datetime(user_date)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –≤ DataFrame
if user_date in df['Date'].values:
    event = df.loc[df['Date'] == user_date, 'event'].values[0]
    print(f"–î–∞—Ç–∞ {user_date.strftime('%Y-%m-%d')} –Ω–∞–π–¥–µ–Ω–∞. –°–æ–±—ã—Ç–∏–µ: {event}")
else:
    print(f"–î–∞—Ç–∞ {user_date.strftime('%Y-%m-%d')} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
    df['diff'] = abs(df['Date'] - user_date)
    nearest_date = df.loc[df['diff'].idxmin(), 'Date']
    nearest_event = df.loc[df['diff'].idxmin(), 'event']

    print(f"–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞: {nearest_date.strftime('%Y-%m-%d')}. –°–æ–±—ã—Ç–∏–µ: {nearest_event}")

"""–°–æ–∑–¥–∞–Ω–∏–µ DataFrame:
*   –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ Date –∏ event.

–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç:
*   –ö–æ–ª–æ–Ω–∫–∞ Date –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏.

–í–≤–æ–¥ –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
*   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–∞–∫–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ datetime.

–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞—Ç—ã:
*   –ï—Å–ª–∏ –¥–∞—Ç–∞ –µ—Å—Ç—å –≤ DataFrame, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ.
*   –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –±–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ `(abs(df['Date'] - user_date)).`

–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
*   –î–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ.
*   –î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã –≤—ã–≤–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∏ –µ—ë —Å–æ–±—ã—Ç–∏–µ.

##9: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ä–∞–∑–¥–µ–ª—è—è –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º, –∫–∞–∂–¥—É—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–ª—é—á–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, —Ç–æ –≤—Å–µ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
–≤—ã–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –î–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ç–æ–∫–æ–≤—ã–π –≤–≤–æ–¥ sys.stdin.

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è stdin –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .py –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (cmd) –∏–ª–∏ PowerShell. –ü–æ—Å–ª–µ —á–µ–≥–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç—É–¥–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ


```
{
    "name": "John",
    "age": 30,
    "hobbies": ["reading", "swimming", "coding"],
    "address": {
        "street": "123 Main St",
        "city": "New York"
    }
}
```
–í—ã–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ (Ctrl + Z) + Enter - Windows | Ctrl + D - UNIX.
"""

import json
import sys

def process_value(value):
    if isinstance(value, list):
        return ', '.join(map(str, value))
    return str(value)

def print_key_value_pairs(json_data):
    for key, value in json_data.items():
        processed_value = process_value(value)
        print(f"{key}: {processed_value}")

def main():
    # –°—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å—å –≤–≤–æ–¥ –∏–∑ stdin
    input_data = ''.join(sys.stdin.readlines())

    try:
        # –ü–∞—Ä—Å–∏–º JSON
        json_obj = json.loads(input_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å)
        if isinstance(json_obj, dict):
            print_key_value_pairs(json_obj)
        else:
            print("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å JSON-–æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å)")
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")

if __name__ == "__main__":
    main()

"""#5: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

##1: EDA –∏ Feature Engineering

–°—á–∏—Ç–∞–π—Ç–µ csv-—Ñ–∞–π–ª. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∏–¥–µ:

- —Ñ—Ä–µ–π–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. –¢–µ–∫—Å—Ç –∏ —Ñ—Ä–µ–π–º –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∏—Ç–æ–≥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞.

- –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è, –ª–æ–≥–∏—á–Ω–æ–≥–æ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –º–µ–Ω–µ–µ 3, –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO
import numpy as np

# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–∑–¥–∞–¥–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª
data = """
date,product,category,price,quantity,region
2023-01-01,A,Electronics,999,5,North
2023-01-02,B,Furniture,450,2,South
2023-01-03,C,Electronics,799,3,East
2023-01-04,A,Electronics,899,4,West
2023-01-05,D,Clothing,50,10,North
2023-01-06,B,Furniture,450,1,South
2023-01-07,E,Clothing,30,8,East
2023-01-08,F,Electronics,1200,2,West
2023-01-09,C,Electronics,750,3,North
2023-01-10,D,Clothing,45,12,South
"""
csv_file = StringIO(data)

# 1. –ß—Ç–µ–Ω–∏–µ CSV-—Ñ–∞–π–ª–∞
df = pd.read_csv(csv_file)
df['date'] = pd.to_datetime(df['date'])
df['total_sales'] = df['price'] * df['quantity']

# 2. –†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
description = f"""
–†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:

1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}
   - –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: —Å {df['date'].min().date()} –ø–æ {df['date'].max().date()}
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {df['product'].nunique()}
   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {', '.join(df['category'].unique())}

2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º:
   - –¶–µ–Ω–∞: —Å—Ä–µ–¥–Ω—è—è {df['price'].mean():.2f}, –º–∏–Ω {df['price'].min()}, –º–∞–∫—Å {df['price'].max()}
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: —Å—Ä–µ–¥–Ω–µ–µ {df['quantity'].mean():.2f}, –º–∏–Ω {df['quantity'].min()}, –º–∞–∫—Å {df['quantity'].max()}
   - –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {df['total_sales'].sum():.2f}

3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
   - –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞: {len(df[df['category'] == 'Electronics'])} –ø—Ä–æ–¥–∞–∂
   - –ú–µ–±–µ–ª—å: {len(df[df['category'] == 'Furniture'])} –ø—Ä–æ–¥–∞–∂
   - –û–¥–µ–∂–¥–∞: {len(df[df['category'] == 'Clothing'])} –ø—Ä–æ–¥–∞–∂

4. –†–µ–≥–∏–æ–Ω—ã:
   - –°–µ–≤–µ—Ä: {len(df[df['region'] == 'North'])} –ø—Ä–æ–¥–∞–∂
   - –Æ–≥: {len(df[df['region'] == 'South'])} –ø—Ä–æ–¥–∞–∂
   - –í–æ—Å—Ç–æ–∫: {len(df[df['region'] == 'East'])} –ø—Ä–æ–¥–∞–∂
   - –ó–∞–ø–∞–¥: {len(df[df['region'] == 'West'])} –ø—Ä–æ–¥–∞–∂
"""

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.figure(figsize=(15, 10))

# –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
plt.subplot(2, 2, 1)
sns.barplot(x='category', y='total_sales', data=df, estimator=sum, ci=None)
plt.title('–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
plt.xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
plt.ylabel('–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂')

# –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
plt.subplot(2, 2, 2)
sns.histplot(df['price'], bins=5, kde=True)
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω')
plt.xlabel('–¶–µ–Ω–∞')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')

# –ì—Ä–∞—Ñ–∏–∫ 3: –ü—Ä–æ–¥–∞–∂–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
plt.subplot(2, 2, 3)
region_sales = df.groupby('region')['total_sales'].sum().sort_values(ascending=False)
plt.pie(region_sales, labels=region_sales.index, autopct='%1.1f%%')
plt.title('–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º')

plt.tight_layout()

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print(description)
print("\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
display(df.head())

# –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
plt.show()

"""##2: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è.
–°—á–∏—Ç–∞–π—Ç–µ csv-—Ñ–∞–π–ª.–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:- k-means (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å -–º–µ—Ç–æ–¥ elbow)
- dbscan
–í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞–Ω –∑–¥—Ä–∞–≤—ã–º —Å–º—ã—Å–ª–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –¥–ª—è –æ–±–µ–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–π (k-means\dbscan).–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ kmeans\dbscan –¥–ª—è –¥–≤—É—Ö –∏ —Ç—Ä—ë—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –¥–≤—É–º–µ—Ä–Ω–æ–º\—Ç—Ä—ë—Ö–º–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from pandas.plotting import parallel_coordinates
from mpl_toolkits.mplot3d import Axes3D

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
from sklearn.datasets import load_iris
data = load_iris()
df = pd.DataFrame(data.data, columns=data.feature_names)
print("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
display(df.head())

# 2. –í—ã–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (5 —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
features = df.columns[:5] if len(df.columns) >=5 else df.columns
print(f"\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {list(features)}")

# 3. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[features])

# 4. K-means —Å elbow method
print("\nK-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:")
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# –ì—Ä–∞—Ñ–∏–∫ elbow method
plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
n_clusters = 3  # –ü–æ –≥—Ä–∞—Ñ–∏–∫—É –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –∏–∑–≥–∏–±–∞
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
kmeans_labels = kmeans.fit_predict(X_scaled)
df['kmeans_cluster'] = kmeans_labels

# 5. DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
print("\nDBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è:")
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_labels = dbscan.fit_predict(X_scaled)
df['dbscan_cluster'] = dbscan_labels

# –û—Ü–µ–Ω–∫–∞ —á–∏—Å–ª–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ DBSCAN
n_clusters_dbscan = len(set(dbscan_labels)) - (1 if -1 in dbscan_labels else 0)
print(f"DBSCAN –æ–±–Ω–∞—Ä—É–∂–∏–ª {n_clusters_dbscan} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")

# 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
plt.figure(figsize=(15, 6))
plt.subplot(1, 2, 1)
parallel_coordinates(df, 'kmeans_cluster', cols=features)
plt.title('K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è')

plt.subplot(1, 2, 2)
parallel_coordinates(df, 'dbscan_cluster', cols=features)
plt.title('DBSCAN –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è')
plt.show()

# 7. 2D –∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
# –ò—Å–ø–æ–ª—å–∑—É–µ–º PCA –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
pca = PCA(n_components=3)
X_pca = pca.fit_transform(X_scaled)

# 2D –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=kmeans_labels, cmap='viridis')
plt.title('K-means (2D)')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')

plt.subplot(1, 2, 2)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=dbscan_labels, cmap='viridis')
plt.title('DBSCAN (2D)')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.show()

# 3D –≥—Ä–∞—Ñ–∏–∫–∞
fig = plt.figure(figsize=(15, 6))

ax = fig.add_subplot(121, projection='3d')
ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=kmeans_labels, cmap='viridis')
ax.set_title('K-means (3D)')
ax.set_xlabel('PCA 1')
ax.set_ylabel('PCA 2')
ax.set_zlabel('PCA 3')

ax = fig.add_subplot(122, projection='3d')
ax.scatter(X_pca[:, 0], X_pca[:, 1], X_pca[:, 2], c=dbscan_labels, cmap='viridis')
ax.set_title('DBSCAN (3D)')
ax.set_xlabel('PCA 1')
ax.set_ylabel('PCA 2')
ax.set_zlabel('PCA 3')

plt.show()

# 8. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:")
print(f"K-means (n_clusters={n_clusters}):")
print(df['kmeans_cluster'].value_counts())

print("\nDBSCAN:")
print(df['dbscan_cluster'].value_counts())

"""##3: Anomaly Detection.
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π. –û–±–æ—Å–Ω—É–π—Ç–µ –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π, –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π, –æ–±–æ—Å–Ω—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±–æ—Ä–∫–∏.

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.svm import OneClassSVM
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
import seaborn as sns
from io import StringIO  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º StringIO –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

# 1. –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö)
try:
    df = pd.read_csv('https://my.microsoftpersonalcontent.com/personal/af7b7be8c145f43b/_layouts/15/download.aspx?UniqueId=15df71b8-568a-427b-8f7d-101a28a4e854&Translate=false&tempauth=v1e.eyJzaXRlaWQiOiJiYWNlODI4NC04OWFlLTQxYTItOWZhYS0xNzI1MzIwODU2YTciLCJhcHBpZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDA0ODE3MTBhNCIsImF1ZCI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMC9teS5taWNyb3NvZnRwZXJzb25hbGNvbnRlbnQuY29tQDkxODgwNDBkLTZjNjctNGM1Yi1iMTEyLTM2YTMwNGI2NmRhZCIsImV4cCI6IjE3NDQ1NjM2NTUifQ.zhYUOFQtnMHgEPb6B_sn8RMrVNoSxy1vsT__yrerTguhlyRxQbFUFRx_peJ8XQnne13XQXNlhNedDtdsNYwnIRv8ktU8GbRo1GYAQwKyRWR11iVZFdY45gzFAgPKGvMlY1BVV8fe9N64I_1TQ-gWi5x3U9VTH78XJvgt3UbBTsiUd-fQrlX5PP-CPyW-SDOzY-Fj4y7P8vkbjhabPMLQvCpo0xUhJ0xfOOMvIN0pDTx4IIiGpiZmD5MSEDWpPrEBkRi5rvoYfW_wPy15xqdQpAGppIXb25yl_spxhIZOXY4haJAFz9pVeiiL-MXWLt2poOJY_o9utwnRViqqsaD5c_59kxcygfMvmjQjKBZl5YFQbcb82K6d2DYk1XTzDopHTIaQwSV3Gkb5uJHxtTpNog.0cGHf2tsacohoyeauB0Dh38DmygDbMlgR1oXDTQU3bI&ApiVersion=2.0&AVOverride=1', sep='\t', header=0, index_col="ID")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringIO –Ω–∞–ø—Ä—è–º—É—é
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
    display(df.head())
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    exit()

# 2. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
analysis_approach = """
–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤:
1. Isolation Forest - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –≤—ã—Å–æ–∫–æ—Ä–∞–∑–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤, —Ö–æ—Ä–æ—à–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ç–æ—á–µ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
2. Local Outlier Factor (LOF) - –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
3. One-Class SVM - –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ" –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

–ü–æ—á–µ–º—É –Ω–µ DBSCAN?
DBSCAN - –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –∫–∞–∫ —Ç–æ—á–∫–∏ –≤–Ω–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤,
–Ω–æ –º–µ–Ω–µ–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –¥–ª—è –∑–∞–¥–∞—á–∏ —á–∏—Å—Ç–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π.
"""

print(analysis_approach)

# 3. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
plt.figure(figsize=(15, 10))
for i, col in enumerate(df.select_dtypes(include=np.number).columns, 1):
    plt.subplot(3, 3, i)
    sns.boxplot(y=df[col])
    plt.title(col)
plt.tight_layout()
plt.show()

# 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
numeric_cols = df.select_dtypes(include=np.number).columns.drop('id', errors='ignore')
X = df[numeric_cols]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 5. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π —Ç—Ä–µ–º—è –º–µ—Ç–æ–¥–∞–º–∏
models = {
    "Isolation Forest": IsolationForest(contamination=0.1, random_state=42),
    "Local Outlier Factor": LocalOutlierFactor(n_neighbors=5, contamination=0.1),
    "One-Class SVM": OneClassSVM(nu=0.1)
}

results = pd.DataFrame(index=df.index)
for name, model in models.items():
    if name == "Local Outlier Factor":
        results[name] = model.fit_predict(X_scaled)
    else:
        results[name] = model.fit(X_scaled).predict(X_scaled)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0-1 (1 - –∞–Ω–æ–º–∞–ª–∏—è)
    results[name] = (results[name] == -1).astype(int)

# 6. –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∞–Ω–æ–º–∞–ª–∏–π
df['anomaly_score'] = results.mean(axis=1)
df['is_anomaly'] = (df['anomaly_score'] > 0.5).astype(int)

print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:")
display(results.astype(bool).sum().to_frame('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π'))

print("\n–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
display(df[df['is_anomaly'] == 1])

# 7. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
data_quality_report = """
**–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:**

1. **–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö**: {n_samples} –∑–∞–ø–∏—Å–µ–π. {verdict_samples}
2. **–î–æ–ª—è –∞–Ω–æ–º–∞–ª–∏–π**: {anomaly_percent:.2f}%. {verdict_anomalies}
3. **–ü—Ä–æ–ø—É—Å–∫–∏**: {missing_values}. {verdict_missing}
4. **–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö**: {dtypes_info}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**:
{recommendations}
""".format(
    n_samples=len(df),
    verdict_samples="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π" if len(df) >= 1000 else "–ú–∞–ª–æ–≤–∞—Ç–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–±–æ—Ä –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö",
    anomaly_percent=df['is_anomaly'].mean()*100,
    verdict_anomalies="–ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å" if df['is_anomaly'].mean() < 0.05 else "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω",
    missing_values=df.isnull().sum().sum(),
    verdict_missing="–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ - –æ—Ç–ª–∏—á–Ω–æ!" if df.isnull().sum().sum() == 0 else "–ï—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
    dtypes_info=df.dtypes.to_string(),
    recommendations="- –£–¥–∞–ª–∏—Ç—å —è–≤–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º\n- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏—Ä–æ–¥—É –∞–Ω–æ–º–∞–ª–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" if df['is_anomaly'].mean() > 0 else "- –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —á–∏—Å—Ç—ã–º–∏"
)

print(data_quality_report)

# 8. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è ML)
if len(df) >= 100 and df['is_anomaly'].mean() < 0.2:
    # –£–¥–∞–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    clean_df = df[df['is_anomaly'] == 0].copy()

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    if 'target' in df.columns:
        X = clean_df.drop(['target', 'is_anomaly', 'anomaly_score'], axis=1, errors='ignore')
        y = clean_df['target']
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
        print(f"\n–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞:\n- –û–±—É—á–∞—é—â–∞—è: {len(X_train)} –∑–∞–ø–∏—Å–µ–π\n- –¢–µ—Å—Ç–æ–≤–∞—è: {len(X_test)} –∑–∞–ø–∏—Å–µ–π")
    else:
        print("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –∑–∞–¥–∞—á–∞ –±–µ–∑ —É—á–∏—Ç–µ–ª—è")
else:
    print("\n–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è:")
    print("- –°–±–æ—Ä –±–æ–ª—å—à–µ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö" if len(df) < 100 else "")
    print("- –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π" if df['is_anomaly'].mean() >= 0.2 else "")

# 9. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π (2D PCA)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(12, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=df['is_anomaly'], cmap='coolwarm', alpha=0.6)
plt.title('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π (PCA)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.colorbar(label='–ê–Ω–æ–º–∞–ª–∏—è (1) / –ù–æ—Ä–º–∞ (0)')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv('/content/drive/MyDrive/loco_11_corr.tsv', sep='\t', header = 0, index_col = 'ID')

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
print("\n–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:\n", df.dtypes)
print("\n–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n", df.describe())

# 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# –í—ã–±–æ—Ä —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–∞–Ω–¥–∞–∂–µ–π
features = ['loco_11.tu17l1', 'loco_11.tu17r1', 'loco_11.tu17l2', 'loco_11.tu17r2',
            'loco_11.tu17l3', 'loco_11.tu17r3', 'loco_11.tu17l4', 'loco_11.tu17r4',
            'loco_11.tu17l5', 'loco_11.tu17r5']

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
df_clean = df.dropna(subset=features).copy()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_clean[features])

# 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
inertia = []
k_range = range(2, 10)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –ª–æ–∫—Ç—è
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(k_range, inertia, 'bo-')
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
plt.ylabel('–ò–Ω–µ—Ä—Ü–∏—è')
plt.title('–ú–µ—Ç–æ–¥ –ª–æ–∫—Ç—è')


# –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4)
optimal_k = 4

# 3. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è K-Means
kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
df_clean['cluster'] = kmeans.fit_predict(X_scaled)

# 4. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
centroids = kmeans.cluster_centers_
distances = np.min([np.linalg.norm(X_scaled - centroid, axis=1) for centroid in centroids], axis=0)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –∫–∞–∫ 5% —Ç–æ—á–µ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
anomaly_threshold = np.percentile(distances, 95)
df_clean['is_anomaly'] = distances > anomaly_threshold

# 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∞–Ω–æ–º–∞–ª–∏–π (—Å PCA –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(12, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1],
                hue=df_clean['cluster'],
                style=df_clean['is_anomaly'],
                palette='viridis',
                size=df_clean['is_anomaly'],
                sizes={False: 30, True: 100})
plt.title('–ö–ª–∞—Å—Ç–µ—Ä—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏ (PCA –ø—Ä–æ–µ–∫—Ü–∏—è)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# 6. –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
def detect_outliers_iqr(data, feature, threshold=1.5):
    Q1 = data[feature].quantile(0.25)
    Q3 = data[feature].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - threshold * IQR
    upper = Q3 + threshold * IQR
    return (data[feature] < lower) | (data[feature] > upper)

# –í—ã—è–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
for feature in features:
    df_clean[f'outlier_{feature}'] = detect_outliers_iqr(df_clean, feature)

# 7. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
tech_limits = {
    'tu17l1': (0, 50),    # –ü—Ä–æ–∫–∞—Ç –ª–µ–≤–æ–≥–æ –±–∞–Ω–¥–∞–∂–∞ (–º–º)
    'tu17r1': (0, 50),    # –ü—Ä–æ–∫–∞—Ç –ø—Ä–∞–≤–æ–≥–æ –±–∞–Ω–¥–∞–∂–∞ (–º–º)
    'tu17l2': (20, 40),   # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–µ–±–Ω—è –ª–µ–≤–æ–≥–æ (–º–º)
    'tu17r2': (20, 40),   # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–µ–±–Ω—è –ø—Ä–∞–≤–æ–≥–æ (–º–º)
    'tu17l3': (0, 100),   # –ö—Ä—É—Ç–∏–∑–Ω–∞ –≥—Ä–µ–±–Ω—è –ª–µ–≤–æ–≥–æ (–º–º)
    'tu17r3': (0, 100),   # –ö—Ä—É—Ç–∏–∑–Ω–∞ –≥—Ä–µ–±–Ω—è –ø—Ä–∞–≤–æ–≥–æ (–º–º)
    'tu17l4': (1000, 1300), # –¢–æ–ª—â–∏–Ω–∞ –ª–µ–≤–æ–≥–æ –±–∞–Ω–¥–∞–∂–∞ (–º–º)
    'tu17r4': (1000, 1300), # –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–∞–≤–æ–≥–æ –±–∞–Ω–¥–∞–∂–∞ (–º–º)
    'tu17l5': (900, 1300),  # –î–∏–∞–º–µ—Ç—Ä –ª–µ–≤–æ–≥–æ –±–∞–Ω–¥–∞–∂–∞ (–º–º)
    'tu17r5': (900, 1300)   # –î–∏–∞–º–µ—Ç—Ä –ø—Ä–∞–≤–æ–≥–æ –±–∞–Ω–¥–∞–∂–∞ (–º–º)
}

# –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
tech_anomalies = pd.DataFrame()
for param, (min_val, max_val) in tech_limits.items():
    anomalies = df_clean[(df_clean[param] < min_val) | (df_clean[param] > max_val)]
    if not anomalies.empty:
        tech_anomalies = pd.concat([tech_anomalies, anomalies])

# 8. –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π
print("\n=== –°–≤–æ–¥–∫–∞ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º ===")
print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df_clean)}")
print(f"–ê–Ω–æ–º–∞–ª–∏–∏ –ø–æ K-Means (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞): {df_clean['is_anomaly'].sum()}")
print(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {len(tech_anomalies)}")

# –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Ñ–ª–∞–≥ –∞–Ω–æ–º–∞–ª–∏–π
df_clean['final_anomaly'] = df_clean['is_anomaly']
for feature in features:
    df_clean['final_anomaly'] = df_clean['final_anomaly'] | df_clean[f'outlier_{feature}']

# 9. –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
cluster_stats = df_clean.groupby('cluster')[features].mean()
print("\n–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º:\n", cluster_stats)

# 10. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
# –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
df_final = df_clean[~df_clean['final_anomaly']].copy()

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏ (80/20)
from sklearn.model_selection import train_test_split
train_df, test_df = train_test_split(df_final, test_size=0.2, random_state=42)

print(f"\n–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {len(train_df)}")
print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {len(test_df)}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –∞–Ω–æ–º–∞–ª–∏–π
plt.figure(figsize=(15, 10))
for i, feature in enumerate(features, 1):
    plt.subplot(4, 3, i)
    sns.boxplot(data=df_final, y=feature)
    plt.title(feature)
plt.tight_layout()
plt.show()

"""##4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è

–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è AutoML (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ª—é–±–∞—è - FEDOT, auto-sklearn, LightAutoML –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é).–í—ã–±—Ä–∞—Ç—å (–∏ –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä) –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ - AUC ROC, Accuracy, F1-score –∏ —Ç.–¥.–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Confusion Matrix, ROC-Curve, –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞.–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–¥–µ—Ä–µ–≤—å—è, –ª–µ—Å, –±—É—Å—Ç–∏–Ω–≥, –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∏ –¥—Ä.)–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ Confusion Matrix, ROC-Curve, –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞.

"""

import pandas as pd
data = pd.read_csv('your_file.csv')

from lightautoml.automl.presets.tabular_presets import TabularAutoML
from lightautoml.tasks import Task

task = Task('binary')  # –∏–ª–∏ 'multiclass' –¥–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π
automl = TabularAutoML(task=task, timeout=3600)  # 1 —á–∞—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ

oof_pred = automl.fit_predict(data, roles={'target': 'target_column'})

from sklearn.metrics import roc_auc_score, confusion_matrix, roc_curve

# Confusion Matrix
cm = confusion_matrix(data['target'], oof_pred.data[:, 0] > 0.5)
print("Confusion Matrix:\n", cm)

# ROC Curve
fpr, tpr, _ = roc_curve(data['target'], oof_pred.data[:, 0])
plt.plot(fpr, tpr)
plt.title('ROC Curve')
plt.show()

# AUC-ROC
auc = roc_auc_score(data['target'], oof_pred.data[:, 0])
print(f"AUC-ROC: {auc:.4f}")

from catboost import CatBoostClassifier #—Ä—É—á–Ω–∞—è –º–æ–¥–µ–ª—å
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data.drop('target', axis=1),
                                                    data['target'],
                                                    test_size=0.3)

model = CatBoostClassifier(iterations=500, verbose=100)
model.fit(X_train, y_train)
preds = model.predict_proba(X_test)[:, 1]

# Confusion Matrix
cm = confusion_matrix(y_test, preds > 0.5)
print("Confusion Matrix:\n", cm)

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, preds)
plt.plot(fpr, tpr)
plt.title('ROC Curve')
plt.show()

# AUC-ROC
auc = roc_auc_score(y_test, preds)
print(f"AUC-ROC: {auc:.4f}")

"""##5: –†–µ–≥—Ä–µ—Å—Å–∏—è.
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è AutoML (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ª—é–±–∞—è - FEDOT, auto-sklearn, LightAutoML –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é).–í—ã–±—Ä–∞—Ç—å (–∏ –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä) –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ - MAE, MSE, RMSE –∏ —Ç.–¥.–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (scatter plot, heatmap)–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –±–∞–∑–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–¥–µ—Ä–µ–≤—å—è, –ª–µ—Å, –±—É—Å—Ç–∏–Ω–≥, –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –¥—Ä.)–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞.

"""

!pip install lightautoml

import pandas as pd

data = pd.read_csv('your_file.csv')
X = data.drop('target_column', axis=1)
y = data['target_column']

from lightautoml.automl.presets.tabular_presets import TabularAutoML
from lightautoml.tasks import Task

task = Task('reg', metric='rmse')
automl = TabularAutoML(task=task, timeout=3600) # 1 —á–∞—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ
oof_pred = automl.fit_predict(X, y, roles={'target': 'target_column'})

# –ú–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
from sklearn.metrics import mean_squared_error
rmse = mean_squared_error(y, oof_pred.data[:, 0], squared=False)
print(f"RMSE: {rmse:.4f}")

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y, y=oof_pred.data[:, 0])
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel('Real values')
plt.ylabel('Predicted values')
plt.title('AutoML: Real vs Predicted')
plt.show()

#–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(max_depth=5),
    "Random Forest": RandomForestRegressor(n_estimators=100),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100),
    "Neural Network": MLPRegressor(hidden_layer_sizes=(100, 50))
}

for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    rmse = mean_squared_error(y_test, preds, squared=False)
    print(f"{name} RMSE: {rmse:.4f}")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x=y_test, y=preds)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.xlabel('Real values')
    plt.ylabel('Predicted values')
    plt.title(f'{name}: Real vs Predicted')
    plt.show()


best_model = GradientBoostingRegressor(n_estimators=200)
best_model.fit(X_train, y_train)
preds = best_model.predict(X_test)

error = y_test - preds
plt.figure(figsize=(10, 6))
sns.heatmap(pd.DataFrame({'Real': y_test, 'Predicted': preds, 'Error': error}).corr(),
            annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

#—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
results = []
for name, model in models.items():
    preds = model.predict(X_test)
    rmse = mean_squared_error(y_test, preds, squared=False)
    results.append({'Model': name, 'RMSE': rmse})

results_df = pd.DataFrame(results)
print(results_df.sort_values('RMSE'))

"""#6: –í–µ–±-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–±—Ä–∞–ª–∏)

##1: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
```
(2).plus(3).minus(1)
```

–¥–∞–ª–∏ –±—ã –Ω–∞ –≤—ã—Ö–æ–¥–µ 4.

JS:

```
// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ plus –∫ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É Number
Number.prototype.plus = function(num) {
  return this + num;
};

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ minus –∫ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É Number
Number.prototype.minus = function(num) {
  return this - num;
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const result = (2).plus(3).minus(1);
console.log(result); // –í—ã–≤–µ–¥–µ—Ç 4
```

##2: –°–≤–µ—Ä—Å—Ç–∞—Ç—å –º–∞–∫–µ—Ç

–í —à–∞–ø–∫–µ —Å–∞–π—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Å—å –±–ª–æ–∫ –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É. –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 —Å—Ç—Ä–æ–∫. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –∏ –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∞–≤–æ–≥–æ –º–µ–Ω—é –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10.

–≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–¥–º–µ–Ω—é –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –±–ª–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π
–Ω–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 50 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç —Ñ—É—Ç–µ—Ä–∞. –ü—Ä–∏ —ç—Ç–æ–º —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –º–µ–Ω—é, –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —ç–∫—Ä–∞–Ω–∞.

HTML:
```
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–∞–∫–µ—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ–Ω—é</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        
        body {
            display: flex;
            min-height: 100vh;
            flex-direction: column;
        }
        
        /* –®–∞–ø–∫–∞ */
        header {
            width: 100%;
            height: 300px;
            overflow: hidden;
            position: relative;
        }
        
        .header-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
        }
        
        /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */
        .main-container {
            display: flex;
            flex: 1;
            position: relative;
        }
        
        .content {
            flex: 1;
            padding: 20px;
            background: #f9f9f9;
        }
        
        /* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */
        .sidebar {
            width: 250px;
            padding: 20px;
            background: #333;
            color: white;
            transition: all 0.3s;
        }
        
        .menu {
            position: sticky;
            top: 20px;
        }
        
        .menu-item {
            margin-bottom: 10px;
            cursor: pointer;
        }
        
        .menu-item > a {
            color: white;
            text-decoration: none;
            display: block;
            padding: 8px;
            border-radius: 4px;
            transition: background 0.3s;
        }
        
        .menu-item > a:hover {
            background: #555;
        }
        
        .submenu {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-out;
            padding-left: 15px;
        }
        
        .menu-item.active .submenu {
            max-height: 500px;
            transition: max-height 0.5s ease-in;
        }
        
        .submenu a {
            color: #ddd;
            text-decoration: none;
            display: block;
            padding: 6px 8px;
            border-radius: 4px;
            font-size: 0.9em;
            transition: background 0.3s;
        }
        
        .submenu a:hover {
            background: #444;
        }
        
        /* –ë–ª–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π */
        .social {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #555;
        }
        
        .social a {
            color: white;
            text-decoration: none;
            display: block;
            margin-bottom: 8px;
        }
        
        /* –ü–æ–¥–≤–∞–ª */
        footer {
            background: #222;
            color: white;
            padding: 20px;
            text-align: center;
        }
    </style>
</head>
<body>
    <header>
        <img src="https://via.placeholder.com/1920x300" alt="Header image" class="header-image">
    </header>
    
    <div class="main-container">
        <div class="content">
            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 —Å—Ç—Ä–æ–∫) -->
            <h1>–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç</h1>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam auctor, nisl eget ultricies tincidunt, nisl nisl aliquam nisl, eget ultricies nisl nisl eget nisl.</p>
            <!-- –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ -->
        </div>
        
        <aside class="sidebar">
            <nav class="menu" id="stickyMenu">
                <!-- –ú–µ–Ω—é (–æ—Ç 1 –¥–æ 10 –ø—É–Ω–∫—Ç–æ–≤) -->
                <div class="menu-item">
                    <a href="#">–ü—É–Ω–∫—Ç –º–µ–Ω—é 1</a>
                    <div class="submenu">
                        <a href="#">–ü–æ–¥–ø—É–Ω–∫—Ç 1.1</a>
                        <a href="#">–ü–æ–¥–ø—É–Ω–∫—Ç 1.2</a>
                        <a href="#">–ü–æ–¥–ø—É–Ω–∫—Ç 1.3</a>
                    </div>
                </div>
                <div class="menu-item">
                    <a href="#">–ü—É–Ω–∫—Ç –º–µ–Ω—é 2</a>
                    <div class="submenu">
                        <a href="#">–ü–æ–¥–ø—É–Ω–∫—Ç 2.1</a>
                        <a href="#">–ü–æ–¥–ø—É–Ω–∫—Ç 2.2</a>
                    </div>
                </div>
                <!-- –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ -->
                
                <!-- –ë–ª–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π -->
                <div class="social">
                    <h3>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</h3>
                    <a href="#">Facebook</a>
                    <a href="#">Twitter</a>
                    <a href="#">Instagram</a>
                </div>
            </nav>
        </aside>
    </div>
    
    <footer>
        ¬© 2023 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
    </footer>

    <script>
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–º–µ–Ω—é
        document.querySelectorAll('.menu-item > a').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const parent = this.parentElement;
                parent.classList.toggle('active');
            });
        });
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Ñ—É—Ç–µ—Ä–∞
        window.addEventListener('scroll', function() {
            const menu = document.getElementById('stickyMenu');
            const footer = document.querySelector('footer');
            const socialBlock = document.querySelector('.social');
            
            const menuRect = menu.getBoundingClientRect();
            const footerRect = footer.getBoundingClientRect();
            const socialRect = socialBlock.getBoundingClientRect();
            
            const distanceToFooter = footerRect.top - socialRect.bottom;
            
            if (distanceToFooter < 50) {
                menu.style.position = 'absolute';
                menu.style.bottom = (footerRect.height + 50) + 'px';
                menu.style.top = 'auto';
            } else {
                menu.style.position = 'sticky';
                menu.style.top = '20px';
                menu.style.bottom = 'auto';
            }
        });
    </script>
</body>
</html>
```

##3: –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
(–¢–∞–±–ª–∏—Ü–∞ —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JSON‚Äôa, –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–≥–æ –≤–∏–¥–∞)

–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å backend‚Äôa –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—á–∫—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏. –ó–∞–ø–∏—Å—å –ø–æ—Å—ã–ª–∞–µ–º –Ω–∞ –±—ç–∫—ç–Ω–¥. –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ –∫–ª–∏–∫—É –∑–∞–ø–∏—Å—å —É–¥–∞–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –±—ç–∫—ç–Ω–¥–µ, –ø–æ —É—Å–ø–µ—Ö—É ‚Äî –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ç–Ω–¥–µ —É–¥–∞–ª—è–µ—Ç—Å—è.

–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ –∫–ª–∏–∫—É –Ω–∞ –Ω–µ–µ, –≤ —Ç–∞–±–ª–∏—Ü–µ –≤—Å–µ –∏–Ω–ø—É—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –∏ –Ω–∞ –º–µ—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.

–ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫—ç–Ω–¥, –ø–æ —É—Å–ø–µ—Ö—É ‚Äî –∏–Ω–ø—É—Ç—ã –æ–ø—è—Ç—å —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–∏–¥–æ–Ω–ª–∏ –∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ¬´—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª.

Data Example (React JSX):


```
// –í–º–µ—Å—Ç–æ useEffect —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫ API, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
useEffect(() => {
  const mockData = [
    { id: 1, name: 'John Doe', email: 'john@example.com', role: 'Admin', status: 'active' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'User', status: 'active' },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'Editor', status: 'inactive' },
  ];
  setData(mockData);
  setLoading(false);
}, []);
```

React (JSX):


```
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const DataTable = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [newItem, setNewItem] = useState({
    name: '',
    email: '',
    role: '',
    status: 'active'
  });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchData();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞
  const fetchData = async () => {
    try {
      setLoading(true);
      // –ó–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await axios.get('https://api.example.com/data');
      setData(response.data);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  const handleAddItem = async () => {
    try {
      const response = await axios.post('https://api.example.com/data', newItem);
      setData([...data, response.data]);
      setNewItem({
        name: '',
        email: '',
        role: '',
        status: 'active'
      });
    } catch (err) {
      setError(err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  const handleDelete = async (id) => {
    try {
      await axios.delete(`https://api.example.com/data/${id}`);
      setData(data.filter(item => item.id !== id));
    } catch (err) {
      setError(err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleEdit = (id) => {
    setEditingId(id);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async (id) => {
    try {
      const itemToUpdate = data.find(item => item.id === id);
      await axios.put(`https://api.example.com/data/${id}`, itemToUpdate);
      setEditingId(null);
    } catch (err) {
      setError(err.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const handleChange = (id, field, value) => {
    setData(data.map(item =>
      item.id === id ? { ...item, [field]: value } : item
    ));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  const handleNewItemChange = (e) => {
    const { name, value } = e.target;
    setNewItem({ ...newItem, [name]: value });
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="data-table-container">
      <h2>Data Table</h2>
      
      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ */}
      <div className="add-form">
        <h3>Add New Item</h3>
        <input
          type="text"
          name="name"
          placeholder="Name"
          value={newItem.name}
          onChange={handleNewItemChange}
        />
        <input
          type="email"
          name="email"
          placeholder="Email"
          value={newItem.email}
          onChange={handleNewItemChange}
        />
        <input
          type="text"
          name="role"
          placeholder="Role"
          value={newItem.role}
          onChange={handleNewItemChange}
        />
        <select
          name="status"
          value={newItem.status}
          onChange={handleNewItemChange}
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
        <button onClick={handleAddItem}>Add Item</button>
      </div>
      
      {/* –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö */}
      <table className="data-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {data.map(item => (
            <tr key={item.id}>
              <td>{item.id}</td>
              <td>
                {editingId === item.id ? (
                  <input
                    type="text"
                    value={item.name}
                    onChange={(e) => handleChange(item.id, 'name', e.target.value)}
                  />
                ) : (
                  item.name
                )}
              </td>
              <td>
                {editingId === item.id ? (
                  <input
                    type="email"
                    value={item.email}
                    onChange={(e) => handleChange(item.id, 'email', e.target.value)}
                  />
                ) : (
                  item.email
                )}
              </td>
              <td>
                {editingId === item.id ? (
                  <input
                    type="text"
                    value={item.role}
                    onChange={(e) => handleChange(item.id, 'role', e.target.value)}
                  />
                ) : (
                  item.role
                )}
              </td>
              <td>
                {editingId === item.id ? (
                  <select
                    value={item.status}
                    onChange={(e) => handleChange(item.id, 'status', e.target.value)}
                  >
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                  </select>
                ) : (
                  item.status
                )}
              </td>
              <td>
                {editingId === item.id ? (
                  <button onClick={() => handleSave(item.id)}>Save</button>
                ) : (
                  <button onClick={() => handleEdit(item.id)}>Edit</button>
                )}
                <button onClick={() => handleDelete(item.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DataTable;
```

CSS:


```
.data-table-container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.data-table th, .data-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.data-table th {
  background-color: #f2f2f2;
}

.data-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.data-table tr:hover {
  background-color: #f1f1f1;
}

.add-form {
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f5f5f5;
  border-radius: 5px;
}

.add-form input, .add-form select {
  margin-right: 10px;
  padding: 8px;
}

button {
  padding: 5px 10px;
  margin-right: 5px;
  cursor: pointer;
}
```

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:


```
import React from 'react';
import DataTable from './DataTable';
import './DataTable.css';

function App() {
  return (
    <div className="App">
      <DataTable />
    </div>
  );
}

export default App;
```

##4-6: –†–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞–±–æ—Ç–ª–∏–≤–æ —Å–æ–±—Ä–∞–Ω—ã –ê–ª–∏–Ω–æ–π [—Ç—ã–∫](https://github.com/FlashgoKless/GE/blob/main/web_practice/tasks_explanation.md#1)
"""